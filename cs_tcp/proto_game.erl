%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: git
-module(proto_game).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_PackType/1, enum_value_by_symbol_PackType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("proto_game.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'PackType'() :: 'None' | 'Level' | 'NewLevel' | 'LevelRefresh' | 'InitPlayerInfo'.
-export_type(['PackType'/0]).

%% message types
-type 'StartGameReq'() :: #'StartGameReq'{}.

-type 'StartGameResp'() :: #'StartGameResp'{}.

-type 'GameOverReq'() :: #'GameOverReq'{}.

-type 'GameOverResp'() :: #'GameOverResp'{}.

-type 'GameQuitReq'() :: #'GameQuitReq'{}.

-type 'GameQuitResp'() :: #'GameQuitResp'{}.

-type 'SyncGameOverStateResp'() :: #'SyncGameOverStateResp'{}.

-type 'SyncPackDataReq'() :: #'SyncPackDataReq'{}.

-type 'SyncPackDataResp'() :: #'SyncPackDataResp'{}.

-export_type(['StartGameReq'/0, 'StartGameResp'/0, 'GameOverReq'/0, 'GameOverResp'/0, 'GameQuitReq'/0, 'GameQuitResp'/0, 'SyncGameOverStateResp'/0, 'SyncPackDataReq'/0, 'SyncPackDataResp'/0]).
-type '$msg_name'() :: 'StartGameReq' | 'StartGameResp' | 'GameOverReq' | 'GameOverResp' | 'GameQuitReq' | 'GameQuitResp' | 'SyncGameOverStateResp' | 'SyncPackDataReq' | 'SyncPackDataResp'.
-type '$msg'() :: 'StartGameReq'() | 'StartGameResp'() | 'GameOverReq'() | 'GameOverResp'() | 'GameQuitReq'() | 'GameQuitResp'() | 'SyncGameOverStateResp'() | 'SyncPackDataReq'() | 'SyncPackDataResp'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'StartGameReq' -> encode_msg_StartGameReq(id(Msg, TrUserData), TrUserData);
        'StartGameResp' -> encode_msg_StartGameResp(id(Msg, TrUserData), TrUserData);
        'GameOverReq' -> encode_msg_GameOverReq(id(Msg, TrUserData), TrUserData);
        'GameOverResp' -> encode_msg_GameOverResp(id(Msg, TrUserData), TrUserData);
        'GameQuitReq' -> encode_msg_GameQuitReq(id(Msg, TrUserData), TrUserData);
        'GameQuitResp' -> encode_msg_GameQuitResp(id(Msg, TrUserData), TrUserData);
        'SyncGameOverStateResp' -> encode_msg_SyncGameOverStateResp(id(Msg, TrUserData), TrUserData);
        'SyncPackDataReq' -> encode_msg_SyncPackDataReq(id(Msg, TrUserData), TrUserData);
        'SyncPackDataResp' -> encode_msg_SyncPackDataResp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_StartGameReq(_Msg, _TrUserData) -> <<>>.

encode_msg_StartGameResp(Msg, TrUserData) -> encode_msg_StartGameResp(Msg, <<>>, TrUserData).


encode_msg_StartGameResp(#'StartGameResp'{err_code = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_GameOverReq(_Msg, _TrUserData) -> <<>>.

encode_msg_GameOverResp(Msg, TrUserData) -> encode_msg_GameOverResp(Msg, <<>>, TrUserData).


encode_msg_GameOverResp(#'GameOverResp'{err_code = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_GameQuitReq(_Msg, _TrUserData) -> <<>>.

encode_msg_GameQuitResp(Msg, TrUserData) -> encode_msg_GameQuitResp(Msg, <<>>, TrUserData).


encode_msg_GameQuitResp(#'GameQuitResp'{err_code = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_SyncGameOverStateResp(_Msg, _TrUserData) -> <<>>.

encode_msg_SyncPackDataReq(Msg, TrUserData) -> encode_msg_SyncPackDataReq(Msg, <<>>, TrUserData).


encode_msg_SyncPackDataReq(#'SyncPackDataReq'{pack_type = F1, pack_data = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'None'; TrF1 =:= 0 -> Bin;
                       true -> e_enum_PackType(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_SyncPackDataResp(Msg, TrUserData) -> encode_msg_SyncPackDataResp(Msg, <<>>, TrUserData).


encode_msg_SyncPackDataResp(#'SyncPackDataResp'{pack_type = F1, pack_data = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 'None'; TrF1 =:= 0 -> Bin;
                       true -> e_enum_PackType(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               case iolist_size(TrF2) of
                   0 -> B1;
                   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

e_enum_PackType('None', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_PackType('Level', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_PackType('NewLevel', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_PackType('LevelRefresh', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_PackType('InitPlayerInfo', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_PackType(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('StartGameReq', Bin, TrUserData) -> id(decode_msg_StartGameReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StartGameResp', Bin, TrUserData) -> id(decode_msg_StartGameResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GameOverReq', Bin, TrUserData) -> id(decode_msg_GameOverReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GameOverResp', Bin, TrUserData) -> id(decode_msg_GameOverResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GameQuitReq', Bin, TrUserData) -> id(decode_msg_GameQuitReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GameQuitResp', Bin, TrUserData) -> id(decode_msg_GameQuitResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SyncGameOverStateResp', Bin, TrUserData) -> id(decode_msg_SyncGameOverStateResp(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SyncPackDataReq', Bin, TrUserData) -> id(decode_msg_SyncPackDataReq(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SyncPackDataResp', Bin, TrUserData) -> id(decode_msg_SyncPackDataResp(Bin, TrUserData), TrUserData).



decode_msg_StartGameReq(Bin, TrUserData) -> dfp_read_field_def_StartGameReq(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_StartGameReq(<<>>, 0, 0, _, _) -> #'StartGameReq'{};
dfp_read_field_def_StartGameReq(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_StartGameReq(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_StartGameReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_StartGameReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_StartGameReq(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_StartGameReq(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_StartGameReq(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_StartGameReq(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_StartGameReq(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_StartGameReq(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_StartGameReq(<<>>, 0, 0, _, _) -> #'StartGameReq'{}.

skip_varint_StartGameReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_StartGameReq(Rest, Z1, Z2, F, TrUserData);
skip_varint_StartGameReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_StartGameReq(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_StartGameReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_StartGameReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_StartGameReq(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartGameReq(Rest2, 0, 0, F, TrUserData).

skip_group_StartGameReq(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartGameReq(Rest, 0, Z2, FNum, TrUserData).

skip_32_StartGameReq(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_StartGameReq(Rest, Z1, Z2, F, TrUserData).

skip_64_StartGameReq(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_StartGameReq(Rest, Z1, Z2, F, TrUserData).

decode_msg_StartGameResp(Bin, TrUserData) -> dfp_read_field_def_StartGameResp(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_StartGameResp(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_StartGameResp_err_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_StartGameResp(<<>>, 0, 0, _, F@_1, _) -> #'StartGameResp'{err_code = F@_1};
dfp_read_field_def_StartGameResp(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_StartGameResp(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_StartGameResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_StartGameResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_StartGameResp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_StartGameResp_err_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StartGameResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_StartGameResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_StartGameResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_StartGameResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_StartGameResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_StartGameResp(<<>>, 0, 0, _, F@_1, _) -> #'StartGameResp'{err_code = F@_1}.

d_field_StartGameResp_err_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_StartGameResp_err_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_StartGameResp_err_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_StartGameResp(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_StartGameResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_StartGameResp(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_StartGameResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_StartGameResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_StartGameResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_StartGameResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_StartGameResp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartGameResp(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_StartGameResp(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartGameResp(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_StartGameResp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_StartGameResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_StartGameResp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_StartGameResp(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_GameOverReq(Bin, TrUserData) -> dfp_read_field_def_GameOverReq(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_GameOverReq(<<>>, 0, 0, _, _) -> #'GameOverReq'{};
dfp_read_field_def_GameOverReq(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_GameOverReq(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_GameOverReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_GameOverReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_GameOverReq(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_GameOverReq(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_GameOverReq(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_GameOverReq(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_GameOverReq(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_GameOverReq(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_GameOverReq(<<>>, 0, 0, _, _) -> #'GameOverReq'{}.

skip_varint_GameOverReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_GameOverReq(Rest, Z1, Z2, F, TrUserData);
skip_varint_GameOverReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameOverReq(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_GameOverReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_GameOverReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_GameOverReq(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameOverReq(Rest2, 0, 0, F, TrUserData).

skip_group_GameOverReq(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameOverReq(Rest, 0, Z2, FNum, TrUserData).

skip_32_GameOverReq(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameOverReq(Rest, Z1, Z2, F, TrUserData).

skip_64_GameOverReq(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameOverReq(Rest, Z1, Z2, F, TrUserData).

decode_msg_GameOverResp(Bin, TrUserData) -> dfp_read_field_def_GameOverResp(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_GameOverResp(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_GameOverResp_err_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_GameOverResp(<<>>, 0, 0, _, F@_1, _) -> #'GameOverResp'{err_code = F@_1};
dfp_read_field_def_GameOverResp(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_GameOverResp(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_GameOverResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_GameOverResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_GameOverResp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_GameOverResp_err_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_GameOverResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_GameOverResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_GameOverResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_GameOverResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_GameOverResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_GameOverResp(<<>>, 0, 0, _, F@_1, _) -> #'GameOverResp'{err_code = F@_1}.

d_field_GameOverResp_err_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_GameOverResp_err_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_GameOverResp_err_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GameOverResp(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_GameOverResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_GameOverResp(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_GameOverResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameOverResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_GameOverResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_GameOverResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_GameOverResp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameOverResp(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_GameOverResp(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameOverResp(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_GameOverResp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameOverResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_GameOverResp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameOverResp(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_GameQuitReq(Bin, TrUserData) -> dfp_read_field_def_GameQuitReq(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_GameQuitReq(<<>>, 0, 0, _, _) -> #'GameQuitReq'{};
dfp_read_field_def_GameQuitReq(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_GameQuitReq(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_GameQuitReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_GameQuitReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_GameQuitReq(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_GameQuitReq(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_GameQuitReq(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_GameQuitReq(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_GameQuitReq(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_GameQuitReq(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_GameQuitReq(<<>>, 0, 0, _, _) -> #'GameQuitReq'{}.

skip_varint_GameQuitReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_GameQuitReq(Rest, Z1, Z2, F, TrUserData);
skip_varint_GameQuitReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameQuitReq(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_GameQuitReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_GameQuitReq(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_GameQuitReq(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameQuitReq(Rest2, 0, 0, F, TrUserData).

skip_group_GameQuitReq(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameQuitReq(Rest, 0, Z2, FNum, TrUserData).

skip_32_GameQuitReq(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameQuitReq(Rest, Z1, Z2, F, TrUserData).

skip_64_GameQuitReq(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_GameQuitReq(Rest, Z1, Z2, F, TrUserData).

decode_msg_GameQuitResp(Bin, TrUserData) -> dfp_read_field_def_GameQuitResp(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_GameQuitResp(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_GameQuitResp_err_code(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_GameQuitResp(<<>>, 0, 0, _, F@_1, _) -> #'GameQuitResp'{err_code = F@_1};
dfp_read_field_def_GameQuitResp(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_GameQuitResp(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_GameQuitResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_GameQuitResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_GameQuitResp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_GameQuitResp_err_code(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_GameQuitResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_GameQuitResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_GameQuitResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_GameQuitResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_GameQuitResp(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_GameQuitResp(<<>>, 0, 0, _, F@_1, _) -> #'GameQuitResp'{err_code = F@_1}.

d_field_GameQuitResp_err_code(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_GameQuitResp_err_code(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_GameQuitResp_err_code(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_GameQuitResp(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_GameQuitResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_GameQuitResp(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_GameQuitResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameQuitResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_GameQuitResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_GameQuitResp(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_GameQuitResp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GameQuitResp(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_GameQuitResp(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GameQuitResp(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_GameQuitResp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameQuitResp(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_GameQuitResp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_GameQuitResp(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_SyncGameOverStateResp(Bin, TrUserData) -> dfp_read_field_def_SyncGameOverStateResp(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_SyncGameOverStateResp(<<>>, 0, 0, _, _) -> #'SyncGameOverStateResp'{};
dfp_read_field_def_SyncGameOverStateResp(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_SyncGameOverStateResp(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_SyncGameOverStateResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_SyncGameOverStateResp(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_SyncGameOverStateResp(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_SyncGameOverStateResp(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_SyncGameOverStateResp(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_SyncGameOverStateResp(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_SyncGameOverStateResp(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_SyncGameOverStateResp(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_SyncGameOverStateResp(<<>>, 0, 0, _, _) -> #'SyncGameOverStateResp'{}.

skip_varint_SyncGameOverStateResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_SyncGameOverStateResp(Rest, Z1, Z2, F, TrUserData);
skip_varint_SyncGameOverStateResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_SyncGameOverStateResp(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_SyncGameOverStateResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_SyncGameOverStateResp(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_SyncGameOverStateResp(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SyncGameOverStateResp(Rest2, 0, 0, F, TrUserData).

skip_group_SyncGameOverStateResp(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SyncGameOverStateResp(Rest, 0, Z2, FNum, TrUserData).

skip_32_SyncGameOverStateResp(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_SyncGameOverStateResp(Rest, Z1, Z2, F, TrUserData).

skip_64_SyncGameOverStateResp(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_SyncGameOverStateResp(Rest, Z1, Z2, F, TrUserData).

decode_msg_SyncPackDataReq(Bin, TrUserData) -> dfp_read_field_def_SyncPackDataReq(Bin, 0, 0, 0, id('None', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_SyncPackDataReq(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SyncPackDataReq_pack_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SyncPackDataReq(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SyncPackDataReq_pack_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SyncPackDataReq(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'SyncPackDataReq'{pack_type = F@_1, pack_data = F@_2};
dfp_read_field_def_SyncPackDataReq(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_SyncPackDataReq(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_SyncPackDataReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_SyncPackDataReq(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_SyncPackDataReq(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SyncPackDataReq_pack_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_SyncPackDataReq_pack_data(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SyncPackDataReq(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_SyncPackDataReq(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_SyncPackDataReq(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_SyncPackDataReq(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_SyncPackDataReq(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_SyncPackDataReq(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'SyncPackDataReq'{pack_type = F@_1, pack_data = F@_2}.

d_field_SyncPackDataReq_pack_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SyncPackDataReq_pack_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SyncPackDataReq_pack_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_PackType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_SyncPackDataReq(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_SyncPackDataReq_pack_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SyncPackDataReq_pack_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SyncPackDataReq_pack_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_SyncPackDataReq(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_SyncPackDataReq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_SyncPackDataReq(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_SyncPackDataReq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataReq(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_SyncPackDataReq(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_SyncPackDataReq(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_SyncPackDataReq(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SyncPackDataReq(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_SyncPackDataReq(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SyncPackDataReq(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_SyncPackDataReq(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataReq(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_SyncPackDataReq(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataReq(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_SyncPackDataResp(Bin, TrUserData) -> dfp_read_field_def_SyncPackDataResp(Bin, 0, 0, 0, id('None', TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_SyncPackDataResp(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SyncPackDataResp_pack_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SyncPackDataResp(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_SyncPackDataResp_pack_data(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_SyncPackDataResp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'SyncPackDataResp'{pack_type = F@_1, pack_data = F@_2};
dfp_read_field_def_SyncPackDataResp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_SyncPackDataResp(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_SyncPackDataResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_SyncPackDataResp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_SyncPackDataResp(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SyncPackDataResp_pack_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_SyncPackDataResp_pack_data(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SyncPackDataResp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_SyncPackDataResp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_SyncPackDataResp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_SyncPackDataResp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_SyncPackDataResp(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_SyncPackDataResp(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'SyncPackDataResp'{pack_type = F@_1, pack_data = F@_2}.

d_field_SyncPackDataResp_pack_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SyncPackDataResp_pack_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SyncPackDataResp_pack_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_PackType(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_SyncPackDataResp(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_SyncPackDataResp_pack_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_SyncPackDataResp_pack_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_SyncPackDataResp_pack_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_SyncPackDataResp(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_SyncPackDataResp(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_SyncPackDataResp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_SyncPackDataResp(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataResp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_SyncPackDataResp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_SyncPackDataResp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_SyncPackDataResp(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SyncPackDataResp(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_SyncPackDataResp(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SyncPackDataResp(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_SyncPackDataResp(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataResp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_SyncPackDataResp(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_SyncPackDataResp(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_PackType(0) -> 'None';
d_enum_PackType(1) -> 'Level';
d_enum_PackType(2) -> 'NewLevel';
d_enum_PackType(3) -> 'LevelRefresh';
d_enum_PackType(4) -> 'InitPlayerInfo';
d_enum_PackType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'StartGameReq' -> merge_msg_StartGameReq(Prev, New, TrUserData);
        'StartGameResp' -> merge_msg_StartGameResp(Prev, New, TrUserData);
        'GameOverReq' -> merge_msg_GameOverReq(Prev, New, TrUserData);
        'GameOverResp' -> merge_msg_GameOverResp(Prev, New, TrUserData);
        'GameQuitReq' -> merge_msg_GameQuitReq(Prev, New, TrUserData);
        'GameQuitResp' -> merge_msg_GameQuitResp(Prev, New, TrUserData);
        'SyncGameOverStateResp' -> merge_msg_SyncGameOverStateResp(Prev, New, TrUserData);
        'SyncPackDataReq' -> merge_msg_SyncPackDataReq(Prev, New, TrUserData);
        'SyncPackDataResp' -> merge_msg_SyncPackDataResp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_StartGameReq/3}).
merge_msg_StartGameReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_StartGameResp/3}).
merge_msg_StartGameResp(#'StartGameResp'{err_code = PFerr_code}, #'StartGameResp'{err_code = NFerr_code}, _) ->
    #'StartGameResp'{err_code =
                         if NFerr_code =:= undefined -> PFerr_code;
                            true -> NFerr_code
                         end}.

-compile({nowarn_unused_function,merge_msg_GameOverReq/3}).
merge_msg_GameOverReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_GameOverResp/3}).
merge_msg_GameOverResp(#'GameOverResp'{err_code = PFerr_code}, #'GameOverResp'{err_code = NFerr_code}, _) ->
    #'GameOverResp'{err_code =
                        if NFerr_code =:= undefined -> PFerr_code;
                           true -> NFerr_code
                        end}.

-compile({nowarn_unused_function,merge_msg_GameQuitReq/3}).
merge_msg_GameQuitReq(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_GameQuitResp/3}).
merge_msg_GameQuitResp(#'GameQuitResp'{err_code = PFerr_code}, #'GameQuitResp'{err_code = NFerr_code}, _) ->
    #'GameQuitResp'{err_code =
                        if NFerr_code =:= undefined -> PFerr_code;
                           true -> NFerr_code
                        end}.

-compile({nowarn_unused_function,merge_msg_SyncGameOverStateResp/3}).
merge_msg_SyncGameOverStateResp(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_SyncPackDataReq/3}).
merge_msg_SyncPackDataReq(#'SyncPackDataReq'{pack_type = PFpack_type, pack_data = PFpack_data}, #'SyncPackDataReq'{pack_type = NFpack_type, pack_data = NFpack_data}, _) ->
    #'SyncPackDataReq'{pack_type =
                           if NFpack_type =:= undefined -> PFpack_type;
                              true -> NFpack_type
                           end,
                       pack_data =
                           if NFpack_data =:= undefined -> PFpack_data;
                              true -> NFpack_data
                           end}.

-compile({nowarn_unused_function,merge_msg_SyncPackDataResp/3}).
merge_msg_SyncPackDataResp(#'SyncPackDataResp'{pack_type = PFpack_type, pack_data = PFpack_data}, #'SyncPackDataResp'{pack_type = NFpack_type, pack_data = NFpack_data}, _) ->
    #'SyncPackDataResp'{pack_type =
                            if NFpack_type =:= undefined -> PFpack_type;
                               true -> NFpack_type
                            end,
                        pack_data =
                            if NFpack_data =:= undefined -> PFpack_data;
                               true -> NFpack_data
                            end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'StartGameReq' -> v_msg_StartGameReq(Msg, [MsgName], TrUserData);
        'StartGameResp' -> v_msg_StartGameResp(Msg, [MsgName], TrUserData);
        'GameOverReq' -> v_msg_GameOverReq(Msg, [MsgName], TrUserData);
        'GameOverResp' -> v_msg_GameOverResp(Msg, [MsgName], TrUserData);
        'GameQuitReq' -> v_msg_GameQuitReq(Msg, [MsgName], TrUserData);
        'GameQuitResp' -> v_msg_GameQuitResp(Msg, [MsgName], TrUserData);
        'SyncGameOverStateResp' -> v_msg_SyncGameOverStateResp(Msg, [MsgName], TrUserData);
        'SyncPackDataReq' -> v_msg_SyncPackDataReq(Msg, [MsgName], TrUserData);
        'SyncPackDataResp' -> v_msg_SyncPackDataResp(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_StartGameReq/3}).
-dialyzer({nowarn_function,v_msg_StartGameReq/3}).
v_msg_StartGameReq(#'StartGameReq'{}, _Path, _) -> ok;
v_msg_StartGameReq(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StartGameReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_StartGameResp/3}).
-dialyzer({nowarn_function,v_msg_StartGameResp/3}).
v_msg_StartGameResp(#'StartGameResp'{err_code = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [err_code | Path], TrUserData)
    end,
    ok;
v_msg_StartGameResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StartGameResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_GameOverReq/3}).
-dialyzer({nowarn_function,v_msg_GameOverReq/3}).
v_msg_GameOverReq(#'GameOverReq'{}, _Path, _) -> ok;
v_msg_GameOverReq(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GameOverReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_GameOverResp/3}).
-dialyzer({nowarn_function,v_msg_GameOverResp/3}).
v_msg_GameOverResp(#'GameOverResp'{err_code = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [err_code | Path], TrUserData)
    end,
    ok;
v_msg_GameOverResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GameOverResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_GameQuitReq/3}).
-dialyzer({nowarn_function,v_msg_GameQuitReq/3}).
v_msg_GameQuitReq(#'GameQuitReq'{}, _Path, _) -> ok;
v_msg_GameQuitReq(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GameQuitReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_GameQuitResp/3}).
-dialyzer({nowarn_function,v_msg_GameQuitResp/3}).
v_msg_GameQuitResp(#'GameQuitResp'{err_code = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [err_code | Path], TrUserData)
    end,
    ok;
v_msg_GameQuitResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'GameQuitResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_SyncGameOverStateResp/3}).
-dialyzer({nowarn_function,v_msg_SyncGameOverStateResp/3}).
v_msg_SyncGameOverStateResp(#'SyncGameOverStateResp'{}, _Path, _) -> ok;
v_msg_SyncGameOverStateResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SyncGameOverStateResp'}, X, Path).

-compile({nowarn_unused_function,v_msg_SyncPackDataReq/3}).
-dialyzer({nowarn_function,v_msg_SyncPackDataReq/3}).
v_msg_SyncPackDataReq(#'SyncPackDataReq'{pack_type = F1, pack_data = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_PackType(F1, [pack_type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [pack_data | Path], TrUserData)
    end,
    ok;
v_msg_SyncPackDataReq(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SyncPackDataReq'}, X, Path).

-compile({nowarn_unused_function,v_msg_SyncPackDataResp/3}).
-dialyzer({nowarn_function,v_msg_SyncPackDataResp/3}).
v_msg_SyncPackDataResp(#'SyncPackDataResp'{pack_type = F1, pack_data = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_enum_PackType(F1, [pack_type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [pack_data | Path], TrUserData)
    end,
    ok;
v_msg_SyncPackDataResp(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SyncPackDataResp'}, X, Path).

-compile({nowarn_unused_function,v_enum_PackType/3}).
-dialyzer({nowarn_function,v_enum_PackType/3}).
v_enum_PackType('None', _Path, _TrUserData) -> ok;
v_enum_PackType('Level', _Path, _TrUserData) -> ok;
v_enum_PackType('NewLevel', _Path, _TrUserData) -> ok;
v_enum_PackType('LevelRefresh', _Path, _TrUserData) -> ok;
v_enum_PackType('InitPlayerInfo', _Path, _TrUserData) -> ok;
v_enum_PackType(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_PackType(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'PackType'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'PackType'}, [{'None', 0}, {'Level', 1}, {'NewLevel', 2}, {'LevelRefresh', 3}, {'InitPlayerInfo', 4}]},
     {{msg, 'StartGameReq'}, []},
     {{msg, 'StartGameResp'}, [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'GameOverReq'}, []},
     {{msg, 'GameOverResp'}, [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'GameQuitReq'}, []},
     {{msg, 'GameQuitResp'}, [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}]},
     {{msg, 'SyncGameOverStateResp'}, []},
     {{msg, 'SyncPackDataReq'}, [#field{name = pack_type, fnum = 1, rnum = 2, type = {enum, 'PackType'}, occurrence = optional, opts = []}, #field{name = pack_data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'SyncPackDataResp'}, [#field{name = pack_type, fnum = 1, rnum = 2, type = {enum, 'PackType'}, occurrence = optional, opts = []}, #field{name = pack_data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}]}].


get_msg_names() -> ['StartGameReq', 'StartGameResp', 'GameOverReq', 'GameOverResp', 'GameQuitReq', 'GameQuitResp', 'SyncGameOverStateResp', 'SyncPackDataReq', 'SyncPackDataResp'].


get_group_names() -> [].


get_msg_or_group_names() -> ['StartGameReq', 'StartGameResp', 'GameOverReq', 'GameOverResp', 'GameQuitReq', 'GameQuitResp', 'SyncGameOverStateResp', 'SyncPackDataReq', 'SyncPackDataResp'].


get_enum_names() -> ['PackType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('StartGameReq') -> [];
find_msg_def('StartGameResp') -> [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}];
find_msg_def('GameOverReq') -> [];
find_msg_def('GameOverResp') -> [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}];
find_msg_def('GameQuitReq') -> [];
find_msg_def('GameQuitResp') -> [#field{name = err_code, fnum = 1, rnum = 2, type = int32, occurrence = optional, opts = []}];
find_msg_def('SyncGameOverStateResp') -> [];
find_msg_def('SyncPackDataReq') -> [#field{name = pack_type, fnum = 1, rnum = 2, type = {enum, 'PackType'}, occurrence = optional, opts = []}, #field{name = pack_data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def('SyncPackDataResp') -> [#field{name = pack_type, fnum = 1, rnum = 2, type = {enum, 'PackType'}, occurrence = optional, opts = []}, #field{name = pack_data, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('PackType') -> [{'None', 0}, {'Level', 1}, {'NewLevel', 2}, {'LevelRefresh', 3}, {'InitPlayerInfo', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('PackType', Value) -> enum_symbol_by_value_PackType(Value).


enum_value_by_symbol('PackType', Sym) -> enum_value_by_symbol_PackType(Sym).


enum_symbol_by_value_PackType(0) -> 'None';
enum_symbol_by_value_PackType(1) -> 'Level';
enum_symbol_by_value_PackType(2) -> 'NewLevel';
enum_symbol_by_value_PackType(3) -> 'LevelRefresh';
enum_symbol_by_value_PackType(4) -> 'InitPlayerInfo'.


enum_value_by_symbol_PackType('None') -> 0;
enum_value_by_symbol_PackType('Level') -> 1;
enum_value_by_symbol_PackType('NewLevel') -> 2;
enum_value_by_symbol_PackType('LevelRefresh') -> 3;
enum_value_by_symbol_PackType('InitPlayerInfo') -> 4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Game.StartGameReq">>) -> 'StartGameReq';
fqbin_to_msg_name(<<"Game.StartGameResp">>) -> 'StartGameResp';
fqbin_to_msg_name(<<"Game.GameOverReq">>) -> 'GameOverReq';
fqbin_to_msg_name(<<"Game.GameOverResp">>) -> 'GameOverResp';
fqbin_to_msg_name(<<"Game.GameQuitReq">>) -> 'GameQuitReq';
fqbin_to_msg_name(<<"Game.GameQuitResp">>) -> 'GameQuitResp';
fqbin_to_msg_name(<<"Game.SyncGameOverStateResp">>) -> 'SyncGameOverStateResp';
fqbin_to_msg_name(<<"Game.SyncPackDataReq">>) -> 'SyncPackDataReq';
fqbin_to_msg_name(<<"Game.SyncPackDataResp">>) -> 'SyncPackDataResp';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('StartGameReq') -> <<"Game.StartGameReq">>;
msg_name_to_fqbin('StartGameResp') -> <<"Game.StartGameResp">>;
msg_name_to_fqbin('GameOverReq') -> <<"Game.GameOverReq">>;
msg_name_to_fqbin('GameOverResp') -> <<"Game.GameOverResp">>;
msg_name_to_fqbin('GameQuitReq') -> <<"Game.GameQuitReq">>;
msg_name_to_fqbin('GameQuitResp') -> <<"Game.GameQuitResp">>;
msg_name_to_fqbin('SyncGameOverStateResp') -> <<"Game.SyncGameOverStateResp">>;
msg_name_to_fqbin('SyncPackDataReq') -> <<"Game.SyncPackDataReq">>;
msg_name_to_fqbin('SyncPackDataResp') -> <<"Game.SyncPackDataResp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"Game.PackType">>) -> 'PackType';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('PackType') -> <<"Game.PackType">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'Game'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "game.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["game.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["game"].


get_msg_containment("game") -> ['GameOverReq', 'GameOverResp', 'GameQuitReq', 'GameQuitResp', 'StartGameReq', 'StartGameResp', 'SyncGameOverStateResp', 'SyncPackDataReq', 'SyncPackDataResp'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("game") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("game") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("game") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("game") -> ['PackType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Game.SyncPackDataResp">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.SyncGameOverStateResp">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.StartGameResp">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.GameQuitResp">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.GameOverResp">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.SyncPackDataReq">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.StartGameReq">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.GameQuitReq">>) -> "game";
get_proto_by_msg_name_as_fqbin(<<"Game.GameOverReq">>) -> "game";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Game.PackType">>) -> "game";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "git".
